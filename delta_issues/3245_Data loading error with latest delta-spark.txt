## Bug
Since the release of `delta-spark` 1.2.0 we're seeing tests failing when trying to load data. 

### Describe the problem
This piece of code:
```
from pyspark.sql import SparkSession

SparkSession.builder.getOrCreate().read.load(path=load_path, format="delta")
```

(or specifically these tests: https://github.com/kedro-org/kedro/blob/main/tests/extras/datasets/spark/test_deltatable_dataset.py#L43-L64) 

now throw an error:
```
 An error occurred while calling o173.load.
E           : java.lang.NoClassDefFoundError: Could not initialize class org.apache.spark.sql.delta.DeltaThrowableHelper$
E           	at org.apache.spark.sql.delta.DeltaAnalysisException.<init>(DeltaAnalysisException.scala:24)
E           	at org.apache.spark.sql.delta.DeltaErrors$.notADeltaTableException(DeltaErrors.scala:280)
E           	at org.apache.spark.sql.delta.catalog.DeltaTableV2.toBaseRelation(DeltaTableV2.scala:169)
E           	at org.apache.spark.sql.delta.sources.DeltaDataSource.$anonfun$createRelation$4(DeltaDataSource.scala:187)
E           	at org.apache.spark.sql.delta.metering.DeltaLogging.recordFrameProfile(DeltaLogging.scala:120)
E           	at org.apache.spark.sql.delta.metering.DeltaLogging.recordFrameProfile$(DeltaLogging.scala:118)
E           	at org.apache.spark.sql.delta.sources.DeltaDataSource.recordFrameProfile(DeltaDataSource.scala:50)
E           	at org.apache.spark.sql.delta.sources.DeltaDataSource.createRelation(DeltaDataSource.scala:164)
E           	at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:350)
E           	at org.apache.spark.sql.DataFrameReader.loadV1Source(DataFrameReader.scala:274)
E           	at org.apache.spark.sql.DataFrameReader.$anonfun$load$1(DataFrameReader.scala:243)
E           	at scala.Option.map(Option.scala:230)
E           	at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:210)
E           	at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:188)
E           	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
E           	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
E           	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
E           	at java.lang.reflect.Method.invoke(Method.java:498)
E           	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)
E           	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)
E           	at py4j.Gateway.invoke(Gateway.java:282)
E           	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)
E           	at py4j.commands.CallCommand.execute(CallCommand.java:79)
E           	at py4j.ClientServerConnection.waitForCommands(ClientServerConnection.java:182)
E           	at py4j.ClientServerConnection.run(ClientServerConnection.java:106)
E           	at java.lang.Thread.run(Thread.java:748)
```

#### Further details

Full stacktrace:

```
def exists(self) -> bool:
        """Checks whether a data set's output already exists by calling
        the provided _exists() method.
    
        Returns:
            Flag indicating whether the output already exists.
    
        Raises:
            DataSetError: when underlying exists method raises error.
    
        """
        try:
            self._logger.debug("Checking whether target of %s exists", str(self))
>           return self._exists()

../../../../kedro/io/core.py:280: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <kedro.extras.datasets.spark.deltatable_dataset.DeltaTableDataSet object at 0x7f8d625945b0>

    def _exists(self) -> bool:
        load_path = _strip_dbfs_prefix(self._fs_prefix + str(self._filepath))
    
        try:
>           self._get_spark().read.load(path=load_path, format="delta")

../../../../kedro/extras/datasets/spark/deltatable_dataset.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pyspark.sql.readwriter.DataFrameReader object at 0x7f8d62594160>
path = '/private/var/folders/_3/kzkd3jjj31s24wjnsg7qgnk80000gn/T/pytest-of-merel_theisen/pytest-18/test_save0/test_data'
format = 'delta', schema = None, options = {}

    def load(self, path=None, format=None, schema=None, **options):
        """Loads data from a data source and returns it as a :class:`DataFrame`.
    
        .. versionadded:: 1.4.0
    
        Parameters
        ----------
        path : str or list, optional
            optional string or a list of string for file-system backed data sources.
        format : str, optional
            optional string for format of the data source. Default to 'parquet'.
        schema : :class:`pyspark.sql.types.StructType` or str, optional
            optional :class:`pyspark.sql.types.StructType` for the input schema
            or a DDL-formatted string (For example ``col0 INT, col1 DOUBLE``).
        **options : dict
            all other string options
    
        Examples
        --------
        >>> df = spark.read.format("parquet").load('python/test_support/sql/parquet_partitioned',
        ...     opt1=True, opt2=1, opt3='str')
        >>> df.dtypes
        [('name', 'string'), ('year', 'int'), ('month', 'int'), ('day', 'int')]
    
        >>> df = spark.read.format('json').load(['python/test_support/sql/people.json',
        ...     'python/test_support/sql/people1.json'])
        >>> df.dtypes
        [('age', 'bigint'), ('aka', 'string'), ('name', 'string')]
        """
        if format is not None:
            self.format(format)
        if schema is not None:
            self.schema(schema)
        self.options(**options)
        if isinstance(path, str):
>           return self._df(self._jreader.load(path))

../../../../../../anaconda3/envs/kedrotest/lib/python3.8/site-packages/pyspark/sql/readwriter.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <py4j.java_gateway.JavaMember object at 0x7f8d62594e80>
args = ('/private/var/folders/_3/kzkd3jjj31s24wjnsg7qgnk80000gn/T/pytest-of-merel_theisen/pytest-18/test_save0/test_data',)
args_command = 's/private/var/folders/_3/kzkd3jjj31s24wjnsg7qgnk80000gn/T/pytest-of-merel_theisen/pytest-18/test_save0/test_data\n'
temp_args = []
command = 'c\no132\nload\ns/private/var/folders/_3/kzkd3jjj31s24wjnsg7qgnk80000gn/T/pytest-of-merel_theisen/pytest-18/test_save0/test_data\ne\n'

    def __call__(self, *args):
        args_command, temp_args = self._build_args(*args)
    
        command = proto.CALL_COMMAND_NAME +\
            self.command_header +\
            args_command +\
            proto.END_COMMAND_PART
    
        answer = self.gateway_client.send_command(command)
>       return_value = get_return_value(
            answer, self.gateway_client, self.target_id, self.name)

../../../../../../anaconda3/envs/kedrotest/lib/python3.8/site-packages/py4j/java_gateway.py:1321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

a = ('xro133', <py4j.clientserver.JavaClient object at 0x7f8d61711d60>, 'o132', 'load')
kw = {}
converted = UnknownException('java.lang.ExceptionInInitializerError', 'java.lang.ExceptionInInitializerError\n\tat org.apache.spar...pache.spark.sql.delta.DeltaThrowableHelper$.<clinit>(DeltaThrowableHelper.scala)\n\t... 26 more\n', JavaObject id=o135)

    def deco(*a, **kw):
        try:
>           return f(*a, **kw)

../../../../../../anaconda3/envs/kedrotest/lib/python3.8/site-packages/pyspark/sql/utils.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

answer = 'xro133'
gateway_client = <py4j.clientserver.JavaClient object at 0x7f8d61711d60>
target_id = 'o132', name = 'load'

    def get_return_value(answer, gateway_client, target_id=None, name=None):
        """Converts an answer received from the Java gateway into a Python object.
    
        For example, string representation of integers are converted to Python
        integer, string representation of objects are converted to JavaObject
        instances, etc.
    
        :param answer: the string returned by the Java gateway
        :param gateway_client: the gateway client used to communicate with the Java
            Gateway. Only necessary if the answer is a reference (e.g., object,
            list, map)
        :param target_id: the name of the object from which the answer comes from
            (e.g., *object1* in `object1.hello()`). Optional.
        :param name: the name of the member from which the answer comes from
            (e.g., *hello* in `object1.hello()`). Optional.
        """
        if is_error(answer)[0]:
            if len(answer) > 1:
                type = answer[1]
                value = OUTPUT_CONVERTER[type](answer[2:], gateway_client)
                if answer[1] == REFERENCE_TYPE:
>                   raise Py4JJavaError(
                        "An error occurred while calling {0}{1}{2}.\n".
                        format(target_id, ".", name), value)
E                   py4j.protocol.Py4JJavaError: An error occurred while calling o132.load.
E                   : java.lang.ExceptionInInitializerError
E                   	at org.apache.spark.sql.delta.DeltaAnalysisException.<init>(DeltaAnalysisException.scala:24)
E                   	at org.apache.spark.sql.delta.DeltaErrors$.notADeltaTableException(DeltaErrors.scala:280)
E                   	at org.apache.spark.sql.delta.catalog.DeltaTableV2.toBaseRelation(DeltaTableV2.scala:169)
E                   	at org.apache.spark.sql.delta.sources.DeltaDataSource.$anonfun$createRelation$4(DeltaDataSource.scala:187)
E                   	at org.apache.spark.sql.delta.metering.DeltaLogging.recordFrameProfile(DeltaLogging.scala:120)
E                   	at org.apache.spark.sql.delta.metering.DeltaLogging.recordFrameProfile$(DeltaLogging.scala:118)
E                   	at org.apache.spark.sql.delta.sources.DeltaDataSource.recordFrameProfile(DeltaDataSource.scala:50)
E                   	at org.apache.spark.sql.delta.sources.DeltaDataSource.createRelation(DeltaDataSource.scala:164)
E                   	at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:350)
E                   	at org.apache.spark.sql.DataFrameReader.loadV1Source(DataFrameReader.scala:274)
E                   	at org.apache.spark.sql.DataFrameReader.$anonfun$load$1(DataFrameReader.scala:243)
E                   	at scala.Option.map(Option.scala:230)
E                   	at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:210)
E                   	at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:188)
E                   	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
E                   	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
E                   	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
E                   	at java.lang.reflect.Method.invoke(Method.java:498)
E                   	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)
E                   	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)
E                   	at py4j.Gateway.invoke(Gateway.java:282)
E                   	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)
E                   	at py4j.commands.CallCommand.execute(CallCommand.java:79)
E                   	at py4j.ClientServerConnection.waitForCommands(ClientServerConnection.java:182)
E                   	at py4j.ClientServerConnection.run(ClientServerConnection.java:106)
E                   	at java.lang.Thread.run(Thread.java:748)
E                   Caused by: java.lang.IllegalArgumentException: argument "src" is null
E                   	at com.fasterxml.jackson.databind.ObjectMapper._assertNotNull(ObjectMapper.java:4757)
E                   	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3489)
E                   	at org.apache.spark.sql.delta.DeltaThrowableHelper$.<init>(DeltaThrowableHelper.scala:53)
E                   	at org.apache.spark.sql.delta.DeltaThrowableHelper$.<clinit>(DeltaThrowableHelper.scala)
E                   	... 26 more

../../../../../../anaconda3/envs/kedrotest/lib/python3.8/site-packages/py4j/protocol.py:326: Py4JJavaError

The above exception was the direct cause of the following exception:

self = <tests.extras.datasets.spark.test_deltatable_dataset.TestDeltaTableDataSet object at 0x7f8d615bfd30>
tmp_path = PosixPath('/private/var/folders/_3/kzkd3jjj31s24wjnsg7qgnk80000gn/T/pytest-of-merel_theisen/pytest-18/test_save0')
sample_spark_df = DataFrame[name: string, age: int]

    def test_save(self, tmp_path, sample_spark_df):
        filepath = (tmp_path / "test_data").as_posix()
        delta_ds = DeltaTableDataSet(filepath=filepath)
>       assert not delta_ds.exists()

test_deltatable_dataset.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <kedro.extras.datasets.spark.deltatable_dataset.DeltaTableDataSet object at 0x7f8d625945b0>

    def exists(self) -> bool:
        """Checks whether a data set's output already exists by calling
        the provided _exists() method.
    
        Returns:
            Flag indicating whether the output already exists.
    
        Raises:
            DataSetError: when underlying exists method raises error.
    
        """
        try:
            self._logger.debug("Checking whether target of %s exists", str(self))
            return self._exists()
        except Exception as exc:
            message = (
                f"Failed during exists check for data set {str(self)}.\n{str(exc)}"
            )
>           raise DataSetError(message) from exc
E           kedro.io.core.DataSetError: Failed during exists check for data set DeltaTableDataSet(filepath=/private/var/folders/_3/kzkd3jjj31s24wjnsg7qgnk80000gn/T/pytest-of-merel_theisen/pytest-18/test_save0/test_data, fs_prefix=).
E           An error occurred while calling o132.load.
E           : java.lang.ExceptionInInitializerError
E           	at org.apache.spark.sql.delta.DeltaAnalysisException.<init>(DeltaAnalysisException.scala:24)
E           	at org.apache.spark.sql.delta.DeltaErrors$.notADeltaTableException(DeltaErrors.scala:280)
E           	at org.apache.spark.sql.delta.catalog.DeltaTableV2.toBaseRelation(DeltaTableV2.scala:169)
E           	at org.apache.spark.sql.delta.sources.DeltaDataSource.$anonfun$createRelation$4(DeltaDataSource.scala:187)
E           	at org.apache.spark.sql.delta.metering.DeltaLogging.recordFrameProfile(DeltaLogging.scala:120)
E           	at org.apache.spark.sql.delta.metering.DeltaLogging.recordFrameProfile$(DeltaLogging.scala:118)
E           	at org.apache.spark.sql.delta.sources.DeltaDataSource.recordFrameProfile(DeltaDataSource.scala:50)
E           	at org.apache.spark.sql.delta.sources.DeltaDataSource.createRelation(DeltaDataSource.scala:164)
E           	at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:350)
E           	at org.apache.spark.sql.DataFrameReader.loadV1Source(DataFrameReader.scala:274)
E           	at org.apache.spark.sql.DataFrameReader.$anonfun$load$1(DataFrameReader.scala:243)
E           	at scala.Option.map(Option.scala:230)
E           	at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:210)
E           	at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:188)
E           	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
E           	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
E           	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
E           	at java.lang.reflect.Method.invoke(Method.java:498)
E           	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)
E           	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)
E           	at py4j.Gateway.invoke(Gateway.java:282)
E           	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)
E           	at py4j.commands.CallCommand.execute(CallCommand.java:79)
E           	at py4j.ClientServerConnection.waitForCommands(ClientServerConnection.java:182)
E           	at py4j.ClientServerConnection.run(ClientServerConnection.java:106)
E           	at java.lang.Thread.run(Thread.java:748)
E           Caused by: java.lang.IllegalArgumentException: argument "src" is null
E           	at com.fasterxml.jackson.databind.ObjectMapper._assertNotNull(ObjectMapper.java:4757)
E           	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3489)
E           	at org.apache.spark.sql.delta.DeltaThrowableHelper$.<init>(DeltaThrowableHelper.scala:53)
E           	at org.apache.spark.sql.delta.DeltaThrowableHelper$.<clinit>(DeltaThrowableHelper.scala)
E           	... 26 more

../../../../kedro/io/core.py:285: DataSetError
```

### Environment information
This code is part of a python project.

* Delta Lake version:
* Spark version:
* Scala version:

```
delta-spark==1.2.0
pyspark==3.2.1
```

Observed with python versions 3.7, 3.8, 3.9 and 3.10.

### Willingness to contribute

The Delta Lake Community encourages bug fix contributions. Would you or another member of your organization be willing to contribute a fix for this bug to the Delta Lake code base?

- [ ] Yes. I can contribute a fix for this bug independently.
- [ ] Yes. I would be willing to contribute a fix for this bug with guidance from the Delta Lake community.
- [X] No. I cannot contribute a bug fix at this time.
