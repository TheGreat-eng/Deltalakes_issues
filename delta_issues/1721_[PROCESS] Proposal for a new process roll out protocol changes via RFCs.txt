# Motivation

Whenever we design and propose a protocol change, (e.g., a new table feature), we go through a preview / experimental phase during which the details of the protocol can undergo changes. Until the protocol change is completely tested and finalized, it cannot be guaranteed that the tables created with the preview feature will be forward compatible with any Delta reader/writer. However, today, this "preview phase" is not properly communicated as we directly merge any new proposal into the[ final protocol doc](https://github.com/delta-io/delta/blob/master/PROTOCOL.md) without proper annotation about its "preview" nature. This has led to a number of issues in the past. For example: CheckpointV2 was released in Delta 3.0, and immediately after that [it was reported](https://github.com/delta-io/delta/issues/2214) that certain details of the implemented protocol are different from the documented protocol. We had to update the protocol doc after the implementation and tables generated by that implementation were released in the wild.

# New RFC Process Proposal
To avoid confusions like this, let us have a RFC process that clearly separates features in preview from finalized features with future compatibility guarantees. The proposed process is as follows.

## RFC structure

-   Location: All preview protocol changes will be located in a new directory `<delta_repo_root>/protocol_rfcs/` . Contents of the directory will be as follows:
  -   In the directory, each proposed change will be stored in a markdown file named `<table_feature_name>.md` (or some other meaningful name that makes it easy to identify).
  -   The directory will have index.md that will contain the list of current and past RFCs along with their status - `opened on <date>, accepted on <date>, rejected on <date>`.

-   Template of an RFC doc: Each doc must be in markdown format. Contents of the markdown: 
   -   Title: Name of the protocol change / table feature
   -   Link to the Github issue with additional context and discussions
   -   New or existing sections of the final protocol doc that need to be modified 
        -  For existing sections, the changed content must be made clear (e.g., new content highlighted in bold/italics, removed content u strikethrough).

## Steps of rolling out a protocol change

###  **1. Make initial proposal** 
Create a Github issue of type [Protocol Change Request].
  -   This will be a new type of [issue template](https://github.com/delta-io/delta/tree/master/.github/ISSUE_TEMPLATE) (see the 2 existing ones) which will define these steps in it.
  -   The description of the issue may have links to design docs, etc.
  -   This issue will serve as the central location for all discussions related to the protocol change.
  
If the proposal comes with a prototype or other pathfinding, the changes should be in an open PR. 

### **2. Add the RFC doc** 
After creating the issue and discussing with the community, if a basic consensus is reached that this feature should be implemented, then create a PR to add the protocol RFC before merging code in master.
-   Clone the RFC template above and create a new RFC markdown doc.
-   Cross-link with the issue with "see #xxx". DONT USE "closes #xxx" or "fixes #xxx" or "resolves #xxx" because we don't want the issue to be closed when this RFC PR is merged.
  
Changes related to the feature should only merge after the RFC is accepted. In addition, for table features, it is strongly recommended that any experimental support for the feature uses a temporary feature name with a suffix like `-dev`. This will communicate to the users that are about to use experimental feature with no future compatibility guarantee.

###  **3. Finally, accept RFC into the protocol** 
For a RFC to be accepted, it must satisfy the following criteria:
-   There is a production implementation (for example, in delta-spark) of the feature that has been thoroughly well tested.
-   There is at least some discussion and/or prototype that ensure the feasibility of the feature in Delta Kernel 

When the success criteria are met, then the protocol can be finalized by making a PR to make the following changes:
-  Closely validate that the protocol spec changes are actually consistent with the production implementation.
-  Cross-link the PR with the original issue with "closes #xxx" as now we are ready to close the issue. 
-  Update protocol.md 
-  Move the RFC doc to the `accepted` subdirectory, and update the state in index.md
-  Remove the temporary/preview suffix like `-dev` in the table feature name from all the code.

###  **3'. Alternative: reject the RFC** 
If the RFC is to be rejected, then make a PR to do the following changes:
 - Moved the RFC doc to the `rejected` subdirectory
 - Update the state in index.md
 - Remove any experimental/preview code related to the feature.


# Next steps to formalize this process
- I will add create the RFC directory and add the RFC template. I will include this process as a markdown as well - UPDATE: done #2601 
- All future protocol changes, should follow this process. For example, new proposals like #2532 should go through this process.


**Please leave your feedback and questions as comments. I will keep updating the proposal based on them. Thanks in advance.**