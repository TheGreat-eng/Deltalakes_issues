## Description
(extracted out the `TableClient` related changes from #2941)

At a high level, the requirements for writing files (either JSON or Parquet) are as follows:
* Write given data into one or more Parquet files (for writing the data or v2 checkpoint sidecar files)
   * `ParquetHandler.writeParquetFiles` is used in this case. 
* Write given data into exactly one atomically file (i.e either the file is created with full content or no file is created at all) (checkpoint classic, delta commit file, v2 cp manifest file)
   * JSON: `JsonHandler.writeJsonFileAtomically` with `overwrite = false`
   * Parquet: `ParquetHandler.writeParquetFileAtomically`
* Write given data atomically into a file (overwrite if it exists) (`_last_checkpoint`)
   * JSON: `JsonHandler.writeJsonFileAtomically` with `overwrite = true` 
* Not supported: Write given data atomically in one or more files (multi-part checkpoint - this is not possible and the reason for creating checkpoint v2 to get around this issue.

In this PR following API are added/updated and also the default implementation for the same.

```
interface ParquetHandler {
  ... existing APIs ...
  
    /**
     * Write the given data as a Parquet file. This call either succeeds in creating the file with
     * given contents or no file is created at all. It won't leave behind a partially written file.
     * <p>
     * @param filePath  Fully qualified destination file path
     * @param data      Iterator of {@link FilteredColumnarBatch}
     * @throws FileAlreadyExistsException if the file already exists and {@code overwrite} is false.
     * @throws IOException                if any other I/O error occurs.
     */
    void writeParquetFileAtomically(
            String filePath,
            CloseableIterator<FilteredColumnarBatch> data) throws IOException;
}
```

The `DefaultParquetHandler` implements the above API using `LogStore`s from `delta-storage` module to achieve the atomicity.

For writing the `_last_checkpoint` file, update the existing `JsonHandler.writeJsonFileAtomically` to take an option `overwrite`.

```
    void writeJsonFileAtomically(
            String filePath,
            CloseableIterator<Row> data,
            boolean overwrite) throws IOException;
```

## How was this patch tested?
Unittests.
