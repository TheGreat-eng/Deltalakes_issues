I have a data partitioned over a few string fields, when I'm trying to load more than ~14-17 partitions, I'm getting a strange exception like this: `Py4JJavaError: An error occurred while calling o209.collectToPython.
: java.lang.RuntimeException: Unsupported literal type class org.apache.spark.unsafe.types.UTF8String <partition value here>`

This doesn't happens when I'm loading a smaller list, loading partitions from parquet, or specifying to load a big list of integer partitions.

Steps to reproduce issue:
```
df = spark.createDataFrame([(i, None) for i in range(1000)], StructType([StructField('a', IntegerType()), StructField('b', IntegerType())]))

df.coalesce(1).write.mode('overwrite').partitionBy('a').format('delta').save('file:///tmp001')
df.coalesce(1).write.mode('overwrite').partitionBy('a').format('parquet').save('file:///tmp002')

spark.read.format('parquet').load('file:///tmp002').where('a in ("{}")'.format('","'.join(map(str, range(1000))))).collect()  # this works fine
spark.read.format('delta').load('file:///tmp001').where('a in ({})'.format(','.join(map(str, range(1000))))).collect()  # this is also
spark.read.format('delta').load('file:///tmp001').where('a in ("{}")'.format('","'.join(map(str, range(10))))).collect()  # even this
spark.read.format('delta').load('file:///tmp001').where('a in ("{}")'.format('","'.join(map(str, range(1000))))).collect()  # this fails with exception below
```

Exception:
```
---------------------------------------------------------------------------
Py4JJavaError                             Traceback (most recent call last)
<ipython-input-16-46caf6bb00f3> in <module>
----> 1 spark.read.format('delta').load('file:///tmp001').where('a in ("{}")'.format('","'.join(map(str, range(1000))))).collect()

/usr/local/lib/python3.6/site-packages/pyspark/sql/dataframe.py in collect(self)
    531         """
    532         with SCCallSiteSync(self._sc) as css:
--> 533             sock_info = self._jdf.collectToPython()
    534         return list(_load_from_socket(sock_info, BatchedSerializer(PickleSerializer())))
    535

/usr/local/lib/python3.6/site-packages/py4j/java_gateway.py in __call__(self, *args)
   1255         answer = self.gateway_client.send_command(command)
   1256         return_value = get_return_value(
-> 1257             answer, self.gateway_client, self.target_id, self.name)
   1258
   1259         for temp_arg in temp_args:

/usr/local/lib/python3.6/site-packages/pyspark/sql/utils.py in deco(*a, **kw)
     61     def deco(*a, **kw):
     62         try:
---> 63             return f(*a, **kw)
     64         except py4j.protocol.Py4JJavaError as e:
     65             s = e.java_exception.toString()

/usr/local/lib/python3.6/site-packages/py4j/protocol.py in get_return_value(answer, gateway_client, target_id, name)
    326                 raise Py4JJavaError(
    327                     "An error occurred while calling {0}{1}{2}.\n".
--> 328                     format(target_id, ".", name), value)
    329             else:
    330                 raise Py4JError(

Py4JJavaError: An error occurred while calling o209.collectToPython.
: java.lang.RuntimeException: Unsupported literal type class org.apache.spark.unsafe.types.UTF8String 522
	at org.apache.spark.sql.catalyst.expressions.Literal$.apply(literals.scala:78)
	at org.apache.spark.sql.delta.DeltaLog$$anonfun$rewritePartitionFilters$1$$anonfun$apply$3$$anonfun$applyOrElse$1.apply(DeltaLog.scala:799)
	at org.apache.spark.sql.delta.DeltaLog$$anonfun$rewritePartitionFilters$1$$anonfun$apply$3$$anonfun$applyOrElse$1.apply(DeltaLog.scala:799)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234)
	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)
	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48)
	at scala.collection.TraversableLike$class.map(TraversableLike.scala:234)
	at scala.collection.AbstractTraversable.map(Traversable.scala:104)
	at org.apache.spark.sql.delta.DeltaLog$$anonfun$rewritePartitionFilters$1$$anonfun$apply$3.applyOrElse(DeltaLog.scala:799)
	at org.apache.spark.sql.delta.DeltaLog$$anonfun$rewritePartitionFilters$1$$anonfun$apply$3.applyOrElse(DeltaLog.scala:792)
	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$2.apply(TreeNode.scala:256)
	at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$2.apply(TreeNode.scala:256)
	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:70)
	at org.apache.spark.sql.catalyst.trees.TreeNode.transformDown(TreeNode.scala:255)
	at org.apache.spark.sql.catalyst.trees.TreeNode.transform(TreeNode.scala:245)
	at org.apache.spark.sql.delta.DeltaLog$$anonfun$rewritePartitionFilters$1.apply(DeltaLog.scala:792)
	at org.apache.spark.sql.delta.DeltaLog$$anonfun$rewritePartitionFilters$1.apply(DeltaLog.scala:792)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234)
	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at scala.collection.TraversableLike$class.map(TraversableLike.scala:234)
	at scala.collection.immutable.List.map(List.scala:296)
	at org.apache.spark.sql.delta.DeltaLog$.rewritePartitionFilters(DeltaLog.scala:788)
	at org.apache.spark.sql.delta.DeltaLog$.filterFileList(DeltaLog.scala:765)
	at org.apache.spark.sql.delta.PartitionFiltering$class.filesForScan(PartitionFiltering.scala:37)
	at org.apache.spark.sql.delta.Snapshot.filesForScan(Snapshot.scala:52)
	at org.apache.spark.sql.delta.files.TahoeLogFileIndex.matchingFiles(TahoeFileIndex.scala:133)
	at org.apache.spark.sql.delta.files.TahoeFileIndex.listFiles(TahoeFileIndex.scala:56)
	at org.apache.spark.sql.execution.FileSourceScanExec.org$apache$spark$sql$execution$FileSourceScanExec$$selectedPartitions$lzycompute(DataSourceScanExec.scala:193)
	at org.apache.spark.sql.execution.FileSourceScanExec.org$apache$spark$sql$execution$FileSourceScanExec$$selectedPartitions(DataSourceScanExec.scala:190)
	at org.apache.spark.sql.execution.FileSourceScanExec$$anonfun$22.apply(DataSourceScanExec.scala:285)
	at org.apache.spark.sql.execution.FileSourceScanExec$$anonfun$22.apply(DataSourceScanExec.scala:284)
	at scala.Option.map(Option.scala:146)
	at org.apache.spark.sql.execution.FileSourceScanExec.metadata$lzycompute(DataSourceScanExec.scala:284)
	at org.apache.spark.sql.execution.FileSourceScanExec.metadata(DataSourceScanExec.scala:270)
	at org.apache.spark.sql.execution.DataSourceScanExec$class.simpleString(DataSourceScanExec.scala:55)
	at org.apache.spark.sql.execution.FileSourceScanExec.simpleString(DataSourceScanExec.scala:159)
	at org.apache.spark.sql.catalyst.plans.QueryPlan.verboseString(QueryPlan.scala:177)
	at org.apache.spark.sql.execution.FileSourceScanExec.org$apache$spark$sql$execution$DataSourceScanExec$$super$verboseString(DataSourceScanExec.scala:159)
	at org.apache.spark.sql.execution.DataSourceScanExec$class.verboseString(DataSourceScanExec.scala:63)
	at org.apache.spark.sql.execution.FileSourceScanExec.verboseString(DataSourceScanExec.scala:159)
	at org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString(TreeNode.scala:548)
	at org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString(TreeNode.scala:568)
	at org.apache.spark.sql.execution.WholeStageCodegenExec.generateTreeString(WholeStageCodegenExec.scala:692)
	at org.apache.spark.sql.catalyst.trees.TreeNode.treeString(TreeNode.scala:472)
	at org.apache.spark.sql.execution.QueryExecution$$anonfun$toString$3.apply(QueryExecution.scala:207)
	at org.apache.spark.sql.execution.QueryExecution$$anonfun$toString$3.apply(QueryExecution.scala:207)
	at org.apache.spark.sql.execution.QueryExecution.stringOrError(QueryExecution.scala:99)
	at org.apache.spark.sql.execution.QueryExecution.toString(QueryExecution.scala:207)
	at org.apache.spark.sql.execution.SQLExecution$$anonfun$withNewExecutionId$1.apply(SQLExecution.scala:75)
	at org.apache.spark.sql.execution.SQLExecution$.withSQLConfPropagated(SQLExecution.scala:125)
	at org.apache.spark.sql.execution.SQLExecution$.withNewExecutionId(SQLExecution.scala:73)
	at org.apache.spark.sql.Dataset.withAction(Dataset.scala:3363)
	at org.apache.spark.sql.Dataset.collectToPython(Dataset.scala:3254)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)
	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)
	at py4j.Gateway.invoke(Gateway.java:282)
	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)
	at py4j.commands.CallCommand.execute(CallCommand.java:79)
	at py4j.GatewayConnection.run(GatewayConnection.java:238)
	at java.lang.Thread.run(Thread.java:748)
```

Delta version: `io.delta:delta-core_2.11:0.4.0`